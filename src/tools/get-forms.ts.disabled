import { z } from "zod";
import { getAccessToken } from "./common.js";
import type { Tool } from "./common.js";
import fetch from "node-fetch";

// Type definitions for ACC Forms API responses
interface FormTemplate {
    name?: string;
    type?: string;
}

interface Form {
    id: string;
    name: string;
    type: string;
    status: string;
    createdAt: string;
    updatedAt: string;
    template?: FormTemplate;
    submissionCount?: number;
    attachments?: any[];
}

interface FormSubmission {
    id: string;
    status: string;
    submittedBy: string;
    submittedAt: string;
    location?: string;
    customValues?: any[];
    pdfValues?: any[];
}

interface APIResponse<T> {
    results?: T[];
    [key: string]: any;
}

const schema = {
    projectId: z.string().nonempty(),
    formId: z.string().optional()
};

export const getForms: Tool<typeof schema> = {
    title: "get-forms",
    description: "List all forms in an ACC project, or get details of a specific form including submissions and data",
    schema,
    callback: async ({ projectId, formId }) => {
        try {
            const accessToken = await getAccessToken(["data:read"]);
            
            if (formId) {
                // Get specific form details
                const formResponse = await fetch(
                    `https://developer.api.autodesk.com/construction/forms/v2/projects/${projectId}/forms/${formId}`,
                    {
                        headers: {
                            'Authorization': `Bearer ${accessToken}`,
                            'Content-Type': 'application/json'
                        }
                    }
                );

                if (!formResponse.ok) {
                    throw new Error(`Failed to fetch form: ${formResponse.status} ${formResponse.statusText}`);
                }

                const formData = await formResponse.json() as Form;
                
                // Also get form submissions
                const submissionsResponse = await fetch(
                    `https://developer.api.autodesk.com/construction/forms/v2/projects/${projectId}/forms/${formId}/submissions`,
                    {
                        headers: {
                            'Authorization': `Bearer ${accessToken}`,
                            'Content-Type': 'application/json'
                        }
                    }
                );

                let submissions: FormSubmission[] = [];
                if (submissionsResponse.ok) {
                    const submissionsData = await submissionsResponse.json() as APIResponse<FormSubmission>;
                    submissions = submissionsData.results || [];
                }

                return {
                    content: [{
                        type: "text",
                        text: JSON.stringify({
                            form: {
                                id: formData.id,
                                name: formData.name,
                                type: formData.type,
                                status: formData.status,
                                createdAt: formData.createdAt,
                                updatedAt: formData.updatedAt,
                                template: {
                                    name: formData.template?.name,
                                    type: formData.template?.type
                                }
                            },
                            submissions: submissions.map((sub: FormSubmission) => ({
                                id: sub.id,
                                status: sub.status,
                                submittedBy: sub.submittedBy,
                                submittedAt: sub.submittedAt,
                                location: sub.location,
                                // Include form values for analysis
                                customValues: sub.customValues,
                                pdfValues: sub.pdfValues
                            }))
                        }, null, 2)
                    }]
                };
            } else {
                // Get all forms in project
                const formsResponse = await fetch(
                    `https://developer.api.autodesk.com/construction/forms/v2/projects/${projectId}/forms`,
                    {
                        headers: {
                            'Authorization': `Bearer ${accessToken}`,
                            'Content-Type': 'application/json'
                        }
                    }
                );

                if (!formsResponse.ok) {
                    throw new Error(`Failed to fetch forms: ${formsResponse.status} ${formsResponse.statusText}`);
                }

                const formsData = await formsResponse.json() as APIResponse<Form>;
                const forms = formsData.results || [];

                return {
                    content: [{
                        type: "text", 
                        text: JSON.stringify({
                            projectId,
                            totalForms: forms.length,
                            forms: forms.map((form: Form) => ({
                                id: form.id,
                                name: form.name,
                                type: form.type,
                                status: form.status,
                                createdAt: form.createdAt,
                                updatedAt: form.updatedAt,
                                template: {
                                    name: form.template?.name,
                                    type: form.template?.type
                                },
                                submissionCount: form.submissionCount || 0
                            }))
                        }, null, 2)
                    }]
                };
            }
        } catch (error) {
            const errorMessage = error instanceof Error ? error.message : 'Unknown error';
            return {
                content: [{
                    type: "text",
                    text: `Error fetching forms: ${errorMessage}`
                }]
            };
        }
    }
};