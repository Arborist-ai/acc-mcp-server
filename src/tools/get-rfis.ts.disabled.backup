import { z } from "zod";
import { getAccessToken } from "./common.js";
import type { Tool } from "./common.js";
import fetch from "node-fetch";

// Type definitions for ACC RFI API responses
interface RFI {
    id: string;
    identifier: string;
    title: string;
    status: string;
    priority?: string;
    dueDate?: string;
    createdAt: string;
    createdBy: string;
    assignedTo?: string;
    description?: string;
    location?: string;
    references?: any[];
    costImpact?: any;
    scheduleImpact?: any;
    attachments?: any[];
    responseCount?: number;
}

interface RFIComment {
    id: string;
    body: string;
    createdAt: string;
    createdBy: string;
    attachments?: any[];
}

interface APIResponse<T> {
    results?: T[];
    [key: string]: any;
}

interface StatusSummary {
    [status: string]: RFI[];
}

const schema = {
    projectId: z.string().nonempty(),
    rfiId: z.string().optional(),
    status: z.enum(["open", "answered", "closed", "void"]).optional()
};

export const getRfis: Tool<typeof schema> = {
    title: "get-rfis",
    description: "List RFIs (Requests for Information) in an ACC project, or get details of a specific RFI including responses and attachments",
    schema,
    callback: async ({ projectId, rfiId, status }) => {
        try {
            const accessToken = await getAccessToken(["data:read"]);
            
            if (rfiId) {
                // Get specific RFI details
                const rfiResponse = await fetch(
                    `https://developer.api.autodesk.com/construction/rfis/v1/projects/${projectId}/rfis/${rfiId}`,
                    {
                        headers: {
                            'Authorization': `Bearer ${accessToken}`,
                            'Content-Type': 'application/json'
                        }
                    }
                );

                if (!rfiResponse.ok) {
                    throw new Error(`Failed to fetch RFI: ${rfiResponse.status} ${rfiResponse.statusText}`);
                }

                const rfiData = await rfiResponse.json() as RFI;
                
                // Get RFI comments/responses
                const commentsResponse = await fetch(
                    `https://developer.api.autodesk.com/construction/rfis/v1/projects/${projectId}/rfis/${rfiId}/comments`,
                    {
                        headers: {
                            'Authorization': `Bearer ${accessToken}`,
                            'Content-Type': 'application/json'
                        }
                    }
                );

                let comments: RFIComment[] = [];
                if (commentsResponse.ok) {
                    const commentsData = await commentsResponse.json() as APIResponse<RFIComment>;
                    comments = commentsData.results || [];
                }

                return {
                    content: [{
                        type: "text",
                        text: JSON.stringify({
                            rfi: {
                                id: rfiData.id,
                                identifier: rfiData.identifier,
                                title: rfiData.title,
                                status: rfiData.status,
                                priority: rfiData.priority,
                                dueDate: rfiData.dueDate,
                                createdAt: rfiData.createdAt,
                                createdBy: rfiData.createdBy,
                                assignedTo: rfiData.assignedTo,
                                description: rfiData.description,
                                // Location and reference information
                                location: rfiData.location,
                                references: rfiData.references,
                                // Cost impact if available
                                costImpact: rfiData.costImpact,
                                scheduleImpact: rfiData.scheduleImpact
                            },
                            responses: comments.map((comment: RFIComment) => ({
                                id: comment.id,
                                body: comment.body,
                                createdAt: comment.createdAt,
                                createdBy: comment.createdBy,
                                attachments: comment.attachments || []
                            })),
                            attachmentCount: rfiData.attachments?.length || 0
                        }, null, 2)
                    }]
                };
            } else {
                // Get all RFIs in project with optional status filter
                let url = `https://developer.api.autodesk.com/construction/rfis/v1/projects/${projectId}/rfis`;
                if (status) {
                    url += `?filter[status]=${status}`;
                }

                const rfisResponse = await fetch(url, {
                    headers: {
                        'Authorization': `Bearer ${accessToken}`,
                        'Content-Type': 'application/json'
                    }
                });

                if (!rfisResponse.ok) {
                    throw new Error(`Failed to fetch RFIs: ${rfisResponse.status} ${rfisResponse.statusText}`);
                }

                const rfisData = await rfisResponse.json() as APIResponse<RFI>;
                const rfis = rfisData.results || [];

                // Group RFIs by status for better overview
                const rfisByStatus: StatusSummary = rfis.reduce((acc: StatusSummary, rfi: RFI) => {
                    const status = rfi.status || 'unknown';
                    if (!acc[status]) acc[status] = [];
                    acc[status].push(rfi);
                    return acc;
                }, {});

                return {
                    content: [{
                        type: "text",
                        text: JSON.stringify({
                            projectId,
                            totalRfis: rfis.length,
                            statusSummary: Object.keys(rfisByStatus).map(status => ({
                                status,
                                count: rfisByStatus[status].length
                            })),
                            rfis: rfis.map((rfi: RFI) => ({
                                id: rfi.id,
                                identifier: rfi.identifier,
                                title: rfi.title,
                                status: rfi.status,
                                priority: rfi.priority,
                                dueDate: rfi.dueDate,
                                createdAt: rfi.createdAt,
                                createdBy: rfi.createdBy,
                                assignedTo: rfi.assignedTo,
                                location: rfi.location,
                                costImpact: rfi.costImpact,
                                scheduleImpact: rfi.scheduleImpact,
                                responseCount: rfi.responseCount || 0
                            }))
                        }, null, 2)
                    }]
                };
            }
        } catch (error) {
            const errorMessage = error instanceof Error ? error.message : 'Unknown error';
            return {
                content: [{
                    type: "text",
                    text: `Error fetching RFIs: ${errorMessage}`
                }]
            };
        }
    }
};